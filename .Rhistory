document("hsurvey2")
library(devtools)
document("hsurvey2")
document("../hsurvey2")
library(hsurvey2)
build()
getwd()
document("../hsurvey2")
document("/hsurvey2")
document("hsurvey2")
document("/hsurvey2")
document("../hsurvey2")
document("../hsurvey2")
library(hsurvey2)
document("../hsurvey2")
library(devtools)
document("../hsurvey2")
library(hsurvey2)
document("../hsurvey2")
document("../hsurvey2")
document("../hsurvey2")
document("../hsurvey2")
library(hsurvey2)
library(hsurvey2)
help("validate_var")
help("validate_data")
document("../hsurvey2")
library(devtools)
document("../hsurvey2")
help("validate_data")
library(hsurvey2)
build("hsurvey2")
build("../hsurvey2")
library(hsurvey2)
library(tidyverse);library(validate);library(haven);library(ggplot2);library(extrafont)
#Cargar base de datos
ed <- read_dta(file = "klaus/descarga_bases/ed_listanf.dta")
mh <- read_dta(file = "klaus/descarga_bases/lista_mh.dta")
#Cargar base de datos
ed <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases")
ed <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\ed_listanf.dta")
ed <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\lista_mh.dta")
#Base compacta
edu <- mh %>%
select(interview__id:ed11__14) %>%
as.data.frame() %>%
mutate(edad = as.numeric(mh02),
id2 = paste0(interview__id, lista_mh__id)) %>%
select(ed01:ed04, id2) %>%
mutate_at(vars(ed01:ed04), .funs = funs(as.numeric(.))) %>%
mutate_at(vars(ed01:ed04), .funs = funs(if_else(is.na(.), -77, .)))
ed <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\ed_listanf.dta")
mh <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\lista_mh.dta")
#Base compacta
edu <- mh %>%
select(interview__id:ed11__14) %>%
as.data.frame() %>%
mutate(edad = as.numeric(mh02),
id2 = paste0(interview__id, lista_mh__id)) %>%
select(ed01:ed04, id2) %>%
mutate_at(vars(ed01:ed04), .funs = funs(as.numeric(.))) %>%
mutate_at(vars(ed01:ed04), .funs = funs(if_else(is.na(.), -77, .)))
#############
#VALIDADORES#
#############
#Generar validadores de ejemplo
v_ed01 <- validator(rule1 = ed01 >= 1 & ed01 <= 16)
v_ed02 <- validator(rule1 = if (ed01 == 7)  ed02_1 >= 1 & ed02_1 <= 8,
rule2 = if (ed01 == 10) ed02_1 >= 1 & ed02_1 <= 4,
rule3 = if (ed01 == 14) ed02_1 >= 1 & ed02_1 <= 7,
rule4 = if (ed01 == 16) ed02_1 == -77)
v_ed03 <- validator(rule1 = ed03 == 1 | ed03 == 2)
library(hsurvey2)
#Dejar todos los validadores en una lista.
vals <- list(v_ed01, v_ed02, v_ed03)
#Etiquetas de las variables. Se usan para nombrar las columnas de la tabla final
labels <- c("ed01", "ed02", "ed03")
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
document("../hsurvey2")
library(hsurvey2)
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
body(confront)
confront
showMethods("confront")
methods(confront)
document("../hsurvey2")
document("../hsurvey2")
library(hsurvey2)
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
document("../hsurvey2")
library(hsurvey2)
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
document("../hsurvey2")
library(hsurvey2)
document("../hsurvey2")
document("../hsurvey2")
library(hsurvey2)
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
library(tidyverse);library(validate);library(haven);library(ggplot2);library(extrafont);library(hsurvey2)
#Cargar base de datos
ed <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\ed_listanf.dta")
mh <- read_dta(file = "C:\\Users\\Klaus\\Desktop\\INE\\teletrabajo\\procesamiento-pp-ix-epf\\klaus\\descarga_bases\\lista_mh.dta")
#Base compacta
edu <- mh %>%
select(interview__id:ed11__14) %>%
as.data.frame() %>%
mutate(edad = as.numeric(mh02),
id2 = paste0(interview__id, lista_mh__id)) %>%
select(ed01:ed04, id2) %>%
mutate_at(vars(ed01:ed04), .funs = funs(as.numeric(.))) %>%
mutate_at(vars(ed01:ed04), .funs = funs(if_else(is.na(.), -77, .)))
v_ed01 <- validator(rule1 = ed01 >= 1 & ed01 <= 16)
v_ed02 <- validator(rule1 = if (ed01 == 7)  ed02_1 >= 1 & ed02_1 <= 8,
rule2 = if (ed01 == 10) ed02_1 >= 1 & ed02_1 <= 4,
rule3 = if (ed01 == 14) ed02_1 >= 1 & ed02_1 <= 7,
rule4 = if (ed01 == 16) ed02_1 == -77)
v_ed03 <- validator(rule1 = ed03 == 1 | ed03 == 2)
vals <- list(v_ed01, v_ed02, v_ed03)
#Etiquetas de las variables. Se usan para nombrar las columnas de la tabla final
labels <- c("ed01", "ed02", "ed03")
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
#Dejar solo los datos útiles. Se recorre toda la lista anterior para dejar únicamente las variables que interesan.
clean <- map2(validados, labels, clean_report, "id2" )
document("../hsurvey2")
library(devtools)
document("../hsurvey2")
library(hsurvey2)
#Confrontar las reglas con cada una de las variables. Esta función devuelve una lista con un data frame para cada columna evaluada
validados <- validate_data(edu, vals, "id2")
#Dejar solo los datos útiles. Se recorre toda la lista anterior para dejar únicamente las variables que interesan.
clean <- map2(validados, labels, clean_report, "id2" )
#Unir todos los resultados de la validación en una tabla. La idea es hacer un join de todas las tablas generadas.
data_merge <- reduce(clean, full_join, "id2")
View(data_merge)
columns <-  names(data_merge)[names(data_merge) != "id2"]
plots <-  map(columns, ~plot_results(data_merge, .x))
names(plots) <- labels
plots
